#!/bin/bash

POKEMON_LIST=(bulbasaur ivysaur venusaur charmander charmeleon)
API_ROOT="https://pokeapi.co/api/v2/pokemon"
DATA_DIR="pokemon_data"
ERR_FILE="errors.txt"

RETRIES=3
DELAY=1

mkdir -p "$DATA_DIR"

# Empty previous error log (optional â€“ comment out if you prefer append-only)
> "$ERR_FILE"

fetch_pokemon() {
  local name=$1
  local file="$DATA_DIR/$name.json"
  local attempt=1
  local status

  while [ $attempt -le $RETRIES ]; do
    status=$(curl -sS -w "%{http_code}" -o "$file" "$API_ROOT/$name")
    if [ "$status" -eq 200 ]; then
      echo "Saved data to $file âœ…"
      return 0
    fi
    echo "  $name â€“ attempt $attempt failed (HTTP $status). Retrying in $((attempt*DELAY))s..." >&2
    sleep $((attempt*DELAY))
    attempt=$((attempt+1))
  done

  # If we reach here all retries failed
  rm -f "$file"
  printf '%s - Failed to fetch %s after %d attempts (last HTTP %s)\n' \
         "$(date '+%F %T')" "$name" "$RETRIES" "$status" >> "$ERR_FILE"
  return 1
}

echo "Starting parallel fetch for: ${POKEMON_LIST[*]}"
pids=()

for poke in "${POKEMON_LIST[@]}"; do
  echo "Fetching data for $poke..."
  fetch_pokemon "$poke" &         # launch in background
  pids+=($!)                      # remember PID
done

# Wait for all background jobs and track overall success
overall_rc=0
for pid in "${pids[@]}"; do
  if ! wait "$pid"; then
    overall_rc=1
  fi
done

echo
if [ $overall_rc -eq 0 ]; then
  echo "All PokÃ©mon fetched successfully ðŸŽ‰"
else
  echo "Some fetches failed â€“ see $ERR_FILE"
fi

exit $overall_rc
